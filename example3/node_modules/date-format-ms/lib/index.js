"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tsToLocalFormat = exports.tsToUtcFormat = exports.isoToLocalFormat = exports.isoToUtcFormat = exports.isoToDate = exports.localYmdHisToUtcFormat = exports.utcYmdHisToLocalFormat = exports.ymdHisToFormat = exports.localYmdHisToDate = exports.utcYmdHisToDate = exports.ymdToFormat = exports.localYmdToDate = exports.utcYmdToDate = exports.dateToLocalFormat = exports.dateToUtcFormat = exports.getNumDaysInMonth = exports.isLeapYear = void 0;
var shortDayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var longDayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
var shortMonthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
var longMonthNames = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
];
var daysInMonthNotLeapYear = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var microsecondsInDay = 1000 * 60 * 60 * 24;
var microsecondsInWeek = 1000 * 60 * 60 * 24 * 7;
var padZeros = function (str, minLen) {
    while (str.length < minLen) {
        str = '0' + str;
    }
    return str;
};
var numToString = function (val, withLeadingZeros) {
    var strVal = val.toString(10);
    if (typeof withLeadingZeros === 'number') {
        return padZeros(strVal, withLeadingZeros);
    }
    else if (withLeadingZeros === true) {
        return padZeros(strVal, 2);
    }
    else {
        return strVal;
    }
};
var isLeapYear = function (year) {
    // Construct a date on the 29th of Feb for the year in question
    // If it gets changed to March 1st then it's not a leap year
    var d1 = new Date(Date.UTC(year, 1, 29));
    return d1.getUTCDate() === 29;
};
exports.isLeapYear = isLeapYear;
var getStartOfDay = function (date, utc) {
    if (utc) {
        return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()));
    }
    else {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    }
};
var getStartOfYear = function (date, utc) {
    if (utc) {
        return new Date(Date.UTC(date.getUTCFullYear(), 0, 1));
    }
    else {
        return new Date(date.getFullYear(), 0, 1);
    }
};
var getFirstThursdayOfYear = function (year, utc) {
    var d = utc ? new Date(Date.UTC(year, 0, 1)) : new Date(year, 0, 1);
    var n = utc ? d.getUTCDay() : d.getDay();
    d.setDate(1 + ((11 - n) % 7));
    return d;
};
var getThursdayOfWeek = function (date, utc) {
    var d = getStartOfDay(date, utc);
    var n = utc ? d.getUTCDay() : d.getDay();
    var offset = ((7 - n) % 7) - 3;
    d.setDate((utc ? d.getUTCDate() : d.getDate()) + offset);
    return d;
};
var getDayOfMonth = function (date, utc) {
    // Day of the month without leading zeros
    // 1 to 31
    return utc ? date.getUTCDate() : date.getDate();
};
var getDayOfWeekIso8601 = function (date, utc) {
    // ISO-8601 numeric representation of the day of the week
    // 1 (for Monday) through 7 (for Sunday)
    var n = utc ? date.getUTCDay() : date.getDay();
    return n === 0 ? 7 : n;
};
var getDayOfWeek = function (date, utc) {
    // Numeric representation of the day of the week
    // 0 (for Sunday) through 6 (for Saturday)
    return utc ? date.getUTCDay() : date.getDay();
};
var getDayOfYear = function (date, utc) {
    // The day of the year (starting from 0)
    // 0 through 365
    var tsAtStartOfDay = getStartOfDay(date, utc).getTime();
    var tsAtStartOfYear = getStartOfYear(date, utc).getTime();
    return Math.round((tsAtStartOfDay - tsAtStartOfYear) / microsecondsInDay);
};
var getWeekOfYear = function (date, utc) {
    // ISO-8601 week number of year, weeks starting on Monday
    // See https://en.wikipedia.org/wiki/ISO_week_date for explanation of this
    var thisThur = getThursdayOfWeek(date, utc);
    var firstThur = getFirstThursdayOfYear(utc ? thisThur.getUTCFullYear() : thisThur.getFullYear(), utc);
    return 1 + Math.round((thisThur.getTime() - firstThur.getTime()) / microsecondsInWeek);
};
var getMonth = function (date, utc) {
    // Numeric representation of a month, without leading zeros
    // 1 through 12
    return (utc ? date.getUTCMonth() : date.getMonth()) + 1;
};
var getYear = function (date, utc) {
    // A full numeric representation of a year, 4 digits
    // Examples: 1999 or 2003
    return utc ? date.getUTCFullYear() : date.getFullYear();
};
var getNumDaysInMonth = function (date, utc) {
    // Number of days in the given month
    // 28 through 31
    var n = utc ? date.getUTCMonth() : date.getMonth();
    if (n === 1 && isLeapYear(utc ? date.getUTCFullYear() : date.getFullYear())) {
        // February in leap year:
        return 29;
    }
    return daysInMonthNotLeapYear[n];
};
exports.getNumDaysInMonth = getNumDaysInMonth;
var getWeekNumberingYearIso8601 = function (date, utc) {
    // ISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead.
    // Examples: 1999 or 2003
    var thisThur = getThursdayOfWeek(date, utc);
    return utc ? thisThur.getUTCFullYear() : thisThur.getFullYear();
};
var getHour24 = function (date, utc) {
    // 24-hour format of an hour
    // 0 through 23
    return utc ? date.getUTCHours() : date.getHours();
};
var getHour12 = function (date, utc) {
    // 12-hour format of an hour
    // 1 through 12
    var n = getHour24(date, utc) % 12;
    return n === 0 ? 12 : n;
};
var getMinutes = function (date, utc) {
    return utc ? date.getUTCMinutes() : date.getMinutes();
};
var getSeconds = function (date, utc) {
    return utc ? date.getUTCSeconds() : date.getSeconds();
};
var getMilliseconds = function (date, utc) {
    return utc ? date.getUTCMilliseconds() : date.getMilliseconds();
};
var getOrdinalSuffix = function (dayOfMonth) {
    // English ordinal suffix for the day of the month, 2 characters
    // st, nd, rd or th. Works well with j
    if (dayOfMonth > 3 && dayOfMonth < 21) {
        return 'th';
    }
    switch (dayOfMonth % 10) {
        case 1:
            return 'st';
        case 2:
            return 'nd';
        case 3:
            return 'rd';
    }
    return 'th';
};
var dateTimeChar = function (char, date, utc) {
    switch (char) {
        case 'd':
            // Day of the month, 2 digits with leading zeros
            // 01 to 31
            return numToString(getDayOfMonth(date, utc), true);
        case 'D':
            // A textual representation of a day, three letters
            // Mon through Sun
            return shortDayNames[utc ? date.getUTCDay() : date.getDay()];
        case 'j':
            // Day of the month without leading zeros
            // 1 to 31
            return numToString(getDayOfMonth(date, utc), false);
        case 'l':
            // A full textual representation of the day of the week
            // Sunday through Saturday
            return longDayNames[utc ? date.getUTCDay() : date.getDay()];
        case 'N':
            // ISO-8601 numeric representation of the day of the week
            // 1 (for Monday) through 7 (for Sunday)
            return numToString(getDayOfWeekIso8601(date, utc), false);
        case 'S':
            // English ordinal suffix for the day of the month, 2 characters
            // st, nd, rd or th. Works well with j
            return getOrdinalSuffix(getDayOfMonth(date, utc));
        case 'w':
            // Numeric representation of the day of the week
            // 0 (for Sunday) through 6 (for Saturday)
            return numToString(getDayOfWeek(date, utc), false);
        case 'z':
            // The day of the year (starting from 0)
            // 0 through 365
            return numToString(getDayOfYear(date, utc), false);
        case 'W':
            // ISO-8601 week number of year, weeks starting on Monday
            // See https://en.wikipedia.org/wiki/ISO_week_date for explanation of this
            return numToString(getWeekOfYear(date, utc), true);
        case 'F':
            // A full textual representation of a month
            // January through December
            return longMonthNames[utc ? date.getUTCMonth() : date.getMonth()];
        case 'm':
            // Numeric representation of a month, with leading zeros
            // 01 through 12
            return numToString(getMonth(date, utc), true);
        case 'M':
            // A short textual representation of a month, three letters
            // Jan through Dec
            return shortMonthNames[utc ? date.getUTCMonth() : date.getMonth()];
        case 'n':
            // Numeric representation of a month, without leading zeros
            // 1 through 12
            return numToString(getMonth(date, utc), false);
        case 't':
            // Number of days in the given month
            // 28 through 31
            return numToString(getNumDaysInMonth(date, utc), false);
        case 'L':
            // Whether it's a leap year
            // 1 if it is a leap year, 0 otherwise.
            return isLeapYear(getYear(date, utc)) ? '1' : '0';
        case 'o':
            // ISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead.
            // Examples: 1999 or 2003
            return numToString(getWeekNumberingYearIso8601(date, utc), false);
        case 'Y':
            // A full numeric representation of a year, 4 digits
            // Examples: 1999 or 2003
            return numToString(getYear(date, utc), 4);
        case 'y':
            // A two digit representation of a year
            // Examples: 99 or 03
            return numToString(getYear(date, utc), 2).slice(-2);
        case 'a':
            // Lowercase Ante meridiem and Post meridiem
            // am or pm
            return getHour24(date, utc) < 12 ? 'am' : 'pm';
        case 'A':
            // Uppercase Ante meridiem and Post meridiem
            // AM or PM
            return getHour24(date, utc) < 12 ? 'AM' : 'PM';
        case 'g':
            // 12-hour format of an hour without leading zeros
            // 1 through 12
            return numToString(getHour12(date, utc), false);
        case 'G':
            // 24-hour format of an hour without leading zeros
            // 0 through 23
            return numToString(getHour24(date, utc), false);
        case 'h':
            // 12-hour format of an hour with leading zeros
            // 01 through 12
            return numToString(getHour12(date, utc), true);
        case 'H':
            // 24-hour format of an hour with leading zeros
            // 00 through 23
            return numToString(getHour24(date, utc), true);
        case 'i':
            // Minutes with leading zeros
            // 00 to 59
            return numToString(getMinutes(date, utc), true);
        case 's':
            // Seconds with leading zeros
            // 00 through 59
            return numToString(getSeconds(date, utc), true);
        case 'v':
            // Milliseconds
            return numToString(getMilliseconds(date, utc), false);
        case 'U':
            // Unix timestamp - seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
            return numToString(Math.round(date.getTime() / 1000), false);
        default:
            return char;
    }
};
var dateToFormat = function (date, format, utc) {
    var char;
    var out = '';
    for (var i = 0; i < format.length; i++) {
        char = format[i];
        if (char === '\\') {
            // Backslash escapes the next character
            i++;
            out += format[i];
        }
        else {
            out += dateTimeChar(char, date, utc);
        }
    }
    return out;
};
var dateToUtcFormat = function (date, format) {
    return dateToFormat(date, format, true);
};
exports.dateToUtcFormat = dateToUtcFormat;
var dateToLocalFormat = function (date, format) {
    return dateToFormat(date, format, false);
};
exports.dateToLocalFormat = dateToLocalFormat;
var ymdToDate = function (ymd, utc) {
    if (typeof ymd === 'string') {
        var match = /^(\d\d\d\d)-(\d\d)-(\d\d)/.exec(ymd.replace(/\s/g, ''));
        if (match) {
            var year = parseInt(match[1], 10);
            var monthIndex = parseInt(match[2], 10) - 1;
            var dayOfMonth = parseInt(match[3], 10);
            var d = new Date();
            if (utc) {
                d.setUTCFullYear(year, monthIndex, dayOfMonth);
                d.setUTCHours(0, 0, 0, 0);
            }
            else {
                d.setFullYear(year, monthIndex, dayOfMonth);
                d.setHours(0, 0, 0, 0);
                return d;
            }
            return d;
        }
    }
    return null;
};
var utcYmdToDate = function (ymd) {
    return ymdToDate(ymd, true);
};
exports.utcYmdToDate = utcYmdToDate;
var localYmdToDate = function (ymd) {
    return ymdToDate(ymd, false);
};
exports.localYmdToDate = localYmdToDate;
var ymdToFormat = function (ymd, format) {
    var date = ymdToDate(ymd, true);
    if (date) {
        return dateToFormat(date, format, true);
    }
    else {
        return null;
    }
};
exports.ymdToFormat = ymdToFormat;
var ymdHisToDate = function (ymdHis, utc) {
    if (typeof ymdHis === 'string') {
        // look for Y-m-d H:i:s format (eg 2020-06-30 07:36:15)
        var match = /^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)$/.exec(ymdHis.trim());
        if (!match) {
            return null;
        }
        var year = parseInt(match[1], 10);
        var monthIndex = parseInt(match[2], 10) - 1;
        var dayOfMonth = parseInt(match[3], 10);
        var hours = parseInt(match[4], 10);
        var mins = parseInt(match[5], 10);
        var secs = parseInt(match[6], 10);
        var d = new Date();
        if (utc) {
            d.setUTCFullYear(year, monthIndex, dayOfMonth);
            d.setUTCHours(hours, mins, secs, 0);
        }
        else {
            d.setFullYear(year, monthIndex, dayOfMonth);
            d.setHours(hours, mins, secs, 0);
            return d;
        }
        return d;
    }
    else {
        return null;
    }
};
var utcYmdHisToDate = function (ymdHis) {
    return ymdHisToDate(ymdHis, true);
};
exports.utcYmdHisToDate = utcYmdHisToDate;
var localYmdHisToDate = function (ymdHis) {
    return ymdHisToDate(ymdHis, false);
};
exports.localYmdHisToDate = localYmdHisToDate;
var ymdHisToFormat = function (ymdHis, format) {
    var date = utcYmdHisToDate(ymdHis);
    if (date) {
        return dateToUtcFormat(date, format);
    }
    else {
        return null;
    }
};
exports.ymdHisToFormat = ymdHisToFormat;
var utcYmdHisToLocalFormat = function (ymdHis, format) {
    var date = utcYmdHisToDate(ymdHis);
    if (date) {
        return dateToLocalFormat(date, format);
    }
    else {
        return null;
    }
};
exports.utcYmdHisToLocalFormat = utcYmdHisToLocalFormat;
var localYmdHisToUtcFormat = function (ymdHis, format) {
    var date = localYmdHisToDate(ymdHis);
    if (date) {
        return dateToUtcFormat(date, format);
    }
    else {
        return null;
    }
};
exports.localYmdHisToUtcFormat = localYmdHisToUtcFormat;
var isoToDate = function (iso) {
    if (typeof iso === 'string') {
        // look for iso format eg
        // 2020-06-30T07:36:15+02:00
        // 2019-11-26T13:47:23.342983Z
        var match = /^(\d\d\d\d)-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d)(\.\d\d\d\d\d\d)?(([+-])(\d\d):(\d\d)|Z)$/.exec(iso.trim());
        if (!match) {
            return null;
        }
        var year = parseInt(match[1], 10);
        var monthIndex = parseInt(match[2], 10) - 1;
        var dayOfMonth = parseInt(match[3], 10);
        var hours = parseInt(match[4], 10);
        var mins = parseInt(match[5], 10);
        var secs = parseInt(match[6], 10);
        var millisecs = Math.round(match[7] == null ? 0 : parseFloat(match[7]) * 1000);
        if (match[8] !== 'Z') {
            mins += (match[9] === '+' ? -1 : 1) * (parseInt(match[10], 10) * 60 + parseInt(match[11], 10));
        }
        return new Date(Date.UTC(year, monthIndex, dayOfMonth, hours, mins, secs, millisecs));
    }
    else {
        return null;
    }
};
exports.isoToDate = isoToDate;
var isoToFormat = function (iso, format, utc) {
    var date = isoToDate(iso);
    if (date) {
        return dateToFormat(date, format, utc);
    }
    else {
        return null;
    }
};
var isoToUtcFormat = function (iso, format) {
    return isoToFormat(iso, format, true);
};
exports.isoToUtcFormat = isoToUtcFormat;
var isoToLocalFormat = function (iso, format) {
    return isoToFormat(iso, format, false);
};
exports.isoToLocalFormat = isoToLocalFormat;
var tsToFormat = function (ts, format, utc) {
    if (typeof ts === 'number') {
        var date = new Date(ts);
        return dateToFormat(date, format, utc);
    }
    else {
        return null;
    }
};
var tsToUtcFormat = function (ts, format) {
    return tsToFormat(ts, format, true);
};
exports.tsToUtcFormat = tsToUtcFormat;
var tsToLocalFormat = function (ts, format) {
    return tsToFormat(ts, format, false);
};
exports.tsToLocalFormat = tsToLocalFormat;
